#!/bin/bash

# Script for triggering an update of the Salt gitfs fileserver or git_pillar via the API

# Display the help text
show_help() {
cat <<HELP
Usage: linting [option]

Options:
  -e    Set the eauth type (pam | ldap)
  -h    Show this help text
  -p    Set the authentication password
  -s    Set the API server and port (ex: salt.example.com:8443)
  -t    Set the update type (states | pillar)
  -u    Set the authentication username

HELP
}

# Read in arguments to set API options
while getopts "e:hp:s:t:u:" option; do
    case "$option" in
        e) eauth="$OPTARG" ;;
        h) show_help;;
        p) password="$OPTARG" ;;
        s) api_server="$OPTARG" ;;
        t) update_type="$OPTARG" ;;
        u) username="$OPTARG" ;;
        *) show_help;;
    esac
done

# Set default error level
error='0'

main() {
    determine_update_type
    api_fetch_token
    api_send_command
    #api_logout
    exit "$error"
}

alert() {
    # Print error to stdout
    printf '%s\n' "$@"
    error='1'
}

# Set variables based on $update_type
determine_update_type() {
    if [[ "$update_type" == 'states' ]]; then
        gitfs_type="fileserver"
    elif [[ "$update_type" == 'pillar' ]]; then
        gitfs_type="git_pillar"
    else
        alert "Unexpected value received for update_type ($update_type)"
        exit 1
    fi
}

# Fetch API token with the supplied credentials
api_fetch_token() {
    response=$(curl -s -w '|%{http_code}' --location --request POST "https://$api_server/login" \
        --header 'Accept: application/json' \
        -d username="$username" \
        -d password="$password" \
        -d eauth="$eauth")

    result="$(awk -F'|' '{print $1}' <<< $response)"
    httpcode="$(awk -F'|' '{print $2}' <<< $response)"

    if [[ $httpcode == '200' ]]; then
        echo "Successfully received API token"
        # Map json values to local variables
        api_token=$(jq -r '.return[].token' <<< $result)
        # Debugging
        #echo "file id: $api_token"
    else
        alert "Failed to retrieve auth token key from API. (http code: $httpcode)"
        exit 1
    fi
}

# Send the update command
api_send_command() {
    response=$(curl -s -w '|%{http_code}' --location --request POST "https://$api_server/" \
        --header 'Accept: application/json' \
        --header "X-Auth-Token: $api_token" \
        -d client="runner" \
        -d fun="$gitfs_type.update")

    result="$(awk -F'|' '{print $1}' <<< $response)"
    httpcode="$(awk -F'|' '{print $2}' <<< $response)"

    if [[ $httpcode == '200' ]]; then
        echo "Successfully ran $gitfs_type.update"
    else
        alert "The $gitfs_type.update command failed. (http code: $httpcode)"
    fi
}

# Log out of the API to destroy the token
api_logout() {
    response=$(curl -s -w '|%{http_code}' --location --request POST "https://$api_server/logout" \
        --header 'Accept: application/json' \
        --header "X-Auth-Token: $api_token")

    result="$(awk -F'|' '{print $1}' <<< $response)"
    httpcode="$(awk -F'|' '{print $2}' <<< $response)"

    if [[ $httpcode == '200' ]]; then
        echo "Successfully logged out of the API"
    else
        alert "API logout failed (http code: $httpcode)"
    fi
}

main
