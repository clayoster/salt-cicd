#!/bin/bash

linting_type="$1"
linting_scope="$2"

# Determine linting scope based on positional argument. Two supported arguments:
#   merge - This will only evaluate files that are included in the merge/pull request
#   all (default) - This will evaluate all files in the repository with the .sls extension
if [[ "$linting_scope" == 'merge' ]]; then
    # Test if the $GITHUB_BASE_REF varible exists (This is Github)
    if [[ -n "$GITHUB_BASE_REF" ]]; then
        platform="github"
        destination_branch="$GITHUB_BASE_REF"
    # Test if the $CI_MERGE_REQUEST_TARGET_BRANCH_NAME variable exists (This is Gitlab)
    elif [[ -n "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" ]]; then
        platform="gitlab"
        destination_branch="$CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
    # If neither of those variables exist, exit the script with an error and print unidentified platform message
    else
        echo "CICD platform not recognized. The 'merge' linting scope only works on Github and Gitlab currently, and only on merge or pull requests."
        exit 1
    fi
    # Ensure the destination branch has been fetched for comparison
    printf -- "-- Fetching the destination branch for comparison --\n"
    git config --global --add safe.directory "$(pwd)" > /dev/null
    git fetch origin "$destination_branch"
    # Gather a list of sls files included in the merge request
    slsfiles_merge="$(git diff --name-only origin/$destination_branch HEAD | grep -E '\.sls$')"

    # Confirm that the files found by git diff exist. If there are files that have been added or
    # deleted in the target branch of the merge/pull request, they will cause errors (usually with yamllint)
    while read file; do
        [[ -e "$file" ]] && slsfiles+=("$file")
    done <<< "$slsfiles_merge"

elif [[ "$linting_scope" == 'all' || "$linting_scope" == '' ]]; then
    # Gather a list of all sls files included in the repository
    slsfiles=("$(find * -type f -iname '*.sls')")
fi

# Test if any sls files were found
# If there are, execute the linting type based on the argument that was passed
if printf "%s\n" "${slsfiles[@]}" | grep -E '\.sls$' &>/dev/null; then
    # Print which SLS files will be linted
    printf -- "-- $linting_type linting the following files --\n$(printf "%s\n" "${slsfiles[@]}")\n--\n"

    if [[ "$linting_type" == 'jinja' ]]; then
        # jinja linting
        printf "%s\n" "${slsfiles[@]}" | xargs -r j2lint --ignore jinja-statements-indentation jinja-statements-delimiter operator-enclosed-by-spaces --extensions sls
    elif [[ "$linting_type" == 'salt' ]]; then
        # salt linting
        printf "%s\n" "${slsfiles[@]}" | xargs -r salt-lint
    elif [[ "$linting_type" == 'yaml' ]]; then
        # yaml linting
        # Adjust jinja templating before linting sls files or yamllint will throw errors
        #   jinja statements will have a comment character (#) placed in front of them
        #   jinja expressions will be replaced with the text 'jinja-expression-replaced'
        printf "%s\n" "${slsfiles[@]}" | xargs -r sed -i -E -e 's/(^\s*(\{%.*|(or|and)\s+(grains|pillar)\[.*|.*%\}).*\s*$)/# \1/g' -e 's/\{\{.*\}\}/jinja-expression-replaced/g'
        
        # Evaluate sls files
        printf "%s\n" "${slsfiles[@]}" | xargs -r yamllint --strict
    else
       echo "The argument that was passed to the script did not match any linting types"
    fi
else
    echo "No sls files found, skipping $1 linting"
    exit 0
fi
